#+startup: indent show2levels
#+title:
#+author masayuki

* どこにでもある，知って得する，関数と微分
** 身近な関数
- 量や状態を知りたい 
- 量や状態を変化させるものを知りたい
- 量や状態を記述したい

- 移動時間と距離と測度とエネルギー
- 電池の電圧と電流とランプの明るさ
- 植物の成長と果実・種と光合成
  
** 身近な微分

- 量や状態を変化させる (のが微分)

- 量や状態の変化を記述したい (微分の言葉)
- 量や状態の変化を制御したい (微分の計算)

- 遠くまで行きたい，どうするればいい
- 効率良く，速く走りたい，どうするればいい
- 車の燃費をよくする走り方，どうするればいい

** 客観的な，数学的な，書き方，考え方
- 関数モデル y=f(x)
  - x は f への入力
  - y は f からの出力
  - f は x を使った操作や計算 f(x)の詳細

- 関数の変化 \( \Delta y = f(x+\Delta x) - f(x) \)
  - 入力の変化量 \( \Delta x \) が生む，出力の変化 \( \Delta y \)

- 入力の変化に対する出力の変化

  \( \Delta y = f(x+\Delta x) - f(x)  = \mbox{直線の傾き} \times \Delta x \)
  
* 関数の三つの捉え方
- 操作的 (箱もでる)， f:X -> Y

  - 入出力を明示する
  - 合成関数，逆関数など考えやすい
  
- 幾何的
  - グラフで表す
  - 連続性，滑かさの把握が容易
  
- 代数的
  - 振舞いを計算法により定義する。多項式なと。
  - 値が計算できる

* 関数のグラフ

{ 点(x, f(x)) | x \in I}

* 離散関数と連続関数
- 離散関数では，
  - 「任意の整数の次の整数が存在する」ことが，
    入力値の連続性で，
  - 出力はあまり気にしない。
  - 数学的帰納法の原理につながる

- f : R -> R の連続性
  - 入力の連続性 R
  - 出力の連続性 R
  - 連続な入力に対し，連続性な出力が得られる

- 極限による表現

  - 論理式による表現
    \any x \in R \exist a in R
    \any \epsilon \exist \delta
  
   | x - a | < \epsilon => |f(x)-f(a)| < \delta
  
  - 数学記号的記法
    - f(x) -> f(a)  (x -> a)
    - \limitの式
  
* 関数の折れ線グラフ化
区間 I_i = (x_i, x_{i+1}) で直線で近似 y - f(x_i) = m_i (x - x_i),
m_i = f(x_{i+1}) - f(x_i) / (x_{i+1} - x_i )

* 関数の変化

- 一区間での区間端点での差

  傾きを極限化して，微分係数につながる

- 2区間での区間端点での差

  一区間目の傾きと二区間目の傾きの差をを極限化して，
  2階微分につながる
  
- 区間 [a,b]での関数の変化は，各区間での区間端点での差の積み重ね

  極限化して，定積分やテイラー展開につながる
  
* 折れ線グラフの極限としての連続関数

- 区間 I_i = (x_i, x_{i+1}) で直線で近似 y - f(x_i) = m_i (x - x_i),
  m_i = f(x_{i+1}) - f(x_i) / (x_{i+1} - x_i )

- 区間巾 -> 0にした極限，区間数を可算無限個に

* 関数の変化の極限としての微分

- m_i はi-区間における直線の傾き，
- 区間数を無限にした極限での m_i を微分係数という

  dy = f'(x) dx の意味を理解すること

  


